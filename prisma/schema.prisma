// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                  @id @default(autoincrement())
  email           String               @unique // 이메일 max 255
  username        String               @unique // 유저명 max 255
  passwordHash    String // 비밀번호
  createdAt       DateTime             @default(now()) // 생성일
  updatedAt       DateTime             @updatedAt // 업데이트일
  deletedAt       DateTime? // 삭제일 
  profile         UserProfile? // 프로필
  socials         UserSocials? // 소셜
  skills          UsersTags[] // 유저 스킬
  authentications UserAuthentication[] // 인증정보
  posts           Post[] // 포스트 정보
  tagFollowing    TagFollowing[] // 태그 팔로잉
  comments        Comment[]            @relation("user")
  commentLike     CommentLike[]
  notifications   Notification[]
  socialAccount   SocialAccount[]
  drafts          PostDraft[]
}

model UserProfile {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  name          String
  tagline       String?
  avatarUrl     String?
  location      String?
  bio           String?
  availableText String? // max 140
  createdAt     DateTime  @default(now()) // 생성일
  updatedAt     DateTime  @updatedAt // 업데이트일
  deletedAt     DateTime? // 삭제일 
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSocials {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  github    String?
  twitter   String?
  facebook  String?
  instagram String?
  website   String?
  createdAt DateTime  @default(now()) // 생성일
  updatedAt DateTime  @updatedAt // 업데이트일
  deletedAt DateTime? // 삭제일
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAuthentication {
  id              Int       @id @default(autoincrement())
  lastValidatedAt DateTime // 마지막으로 검증된 날짜
  expiresAt       DateTime // 만료시간
  createdAt       DateTime  @default(now()) // 생성일
  updatedAt       DateTime  @updatedAt // 업데이트일
  deletedAt       DateTime? // 삭제일
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
}

model UsersTags {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([userId, tagId])
  @@index(tagId)
  @@index(userId)
}

model PostDraft {
  id        Int       @id @default(autoincrement())
  title     String? // max 255
  json      String? // max 255
  createdAt DateTime  @default(now()) // 생성일
  updatedAt DateTime  @updatedAt // 업데이트일
  deletedAt DateTime? // 삭제일 
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int?

  @@index([createdAt(sort: Desc)])
}

model Post {
  id              Int            @id @default(autoincrement())
  title           String // max 255
  subTitle        String? // max 255
  content         String? // max 255
  thumbnail       String?
  disabledComment Boolean?       @default(false) // 댓글 비활성화
  isDeleted       Boolean?       @default(false) // 삭제 여부
  isDraft         Boolean?       @default(false) // 초안여부
  publishingDate  DateTime? // 발행일
  createdAt       DateTime       @default(now()) // 생성일
  updatedAt       DateTime       @updatedAt // 업데이트일
  deletedAt       DateTime? // 삭제일 
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  comments        Comment[]
  postsTags       PostsTags[]
  postLike        PostLike[]
  postStats       PostStats?
  seo             PostSeo?
  notifications   Notification[]

  @@index([createdAt(sort: Desc)])
}

model PostSeo {
  id        Int       @id @default(autoincrement())
  postId    Int       @unique
  title     String? // max 50
  desc      String? // max 156
  image     String?
  createdAt DateTime  @default(now()) // 생성일
  updatedAt DateTime  @default(now()) @updatedAt // 업데이트일
  deletedAt DateTime? // 삭제일
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostStats {
  id            Int      @id @default(autoincrement())
  postId        Int      @unique
  likes         Int      @default(0)
  clicks        Int      @default(0)
  score         Float    @default(0)
  commentsCount Int      @default(0)
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  updatedAt     DateTime @default(now()) @updatedAt

  @@index([score(sort: Desc), postId(sort: Desc)])
  @@index([likes(sort: Desc), postId(sort: Desc)])
}

model PostsTags {
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  Int

  @@id([postId, tagId])
  @@index(tagId)
  @@index(postId)
}

model PostLike {
  id            Int            @id @default(autoincrement())
  postId        Int
  userId        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@unique([postId, userId])
  @@index(postId)
}

model File {
  id         Int       @id @default(autoincrement())
  name       String // 파일명
  url        String // url
  uploadType String // PROFILE | IMAGE | POST_THUMBNAIL | TAG
  mediaType  String //  IMAGE
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  deletedAt  DateTime? // 삭제일 
}

model Tag {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  image         String?
  createdAt     DateTime       @default(now()) // 생성일
  updatedAt     DateTime       @updatedAt // 업데이트일
  deletedAt     DateTime? // 삭제일 
  usersTags     UsersTags[]
  postsTags     PostsTags[]
  following     TagFollowing[]
  tagStats      TagStats?
  notifications Notification[]
}

model TagStats {
  id         Int      @id @default(autoincrement())
  tagId      Int      @unique
  followings Int      @default(0)
  clicks     Int      @default(0)
  score      Float    @default(0)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([score(sort: Desc), tagId(sort: Desc)])
  @@index([followings(sort: Desc), tagId(sort: Desc)])
}

model TagFollowing {
  id     Int  @id @default(autoincrement())
  tagId  Int
  userId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tagId, userId])
  @@index(tagId)
}

model Comment {
  id               Int            @id @default(autoincrement())
  text             String
  post             Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user             User           @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  commentLikes     CommentLike[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  deletedAt        DateTime?
  postId           Int
  userId           Int
  parentCommentId  Int?
  likes            Int            @default(0)
  subcommentsCount Int            @default(0)
  notifications    Notification[]

  @@index(deletedAt)
  @@index(createdAt)
  @@index(parentCommentId)
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  commentId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index(commentId)
}

model Notification {
  id        Int       @id @default(autoincrement())
  type      String // LIKE | COMMENT | ARTICLE | WELCOME
  message   String
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  postId    Int?
  commentId Int?
  tagId     Int?
  userId    Int

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?     @relation(fields: [postId], references: [id])
  comment Comment?  @relation(fields: [commentId], references: [id])
  like    PostLike? @relation(fields: [postId], references: [id])
  tag     Tag?      @relation(fields: [tagId], references: [id])

  @@index([createdAt, read])
}

model SocialAccount {
  id          Int       @id @default(autoincrement())
  socialId    String? // 소셜 아이디
  provider    String?
  accessToken String? // 토큰
  createdAt   DateTime  @default(now()) // 생성일
  updatedAt   DateTime  @updatedAt // 업데이트일
  deletedAt   DateTime? // 삭제일 
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([provider, socialId])
}
