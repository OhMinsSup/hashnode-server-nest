// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  lastActiveAt DateTime?
  lastActiveIp String?
  lastSignInAt DateTime?
  lastSignInIp String?

  UserProfile        UserProfile?
  UserSocial         UserSocial?
  UserPassword       UserPassword?
  UserAuthentication UserAuthentication[]
  UserNotifications  UserNotification[]
  UserTags           UserTags[]
  File               File[]
  PostRead           PostRead[]
  Post               Post[]

  @@map("users")
}

model UserProfile {
  id            String  @id @default(cuid())
  username      String  @unique
  image         String?
  nickname      String?
  tagline       String?
  location      String?
  bio           String?
  availableText String?
  fk_user_id    String  @unique
  User          User    @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserSocial {
  id         String  @id @default(cuid())
  github     String?
  twitter    String?
  facebook   String?
  instagram  String?
  website    String?
  fk_user_id String? @unique
  User       User?   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@map("user_socials")
}

model UserPassword {
  id         String @id @default(cuid())
  hash       String
  salt       String
  fk_user_id String @unique
  User       User   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([fk_user_id], map: "user_passwords_fk_user_id")
  @@map("user_passwords")
}

model UserAuthentication {
  id              String   @id @default(cuid())
  lastValidatedAt DateTime
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  fk_user_id      String?
  User            User?    @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@map("user_authentications")
}

model UserTags {
  id         String @id @default(cuid())
  fk_user_id String
  fk_tag_id  String
  User       User   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)
  Tag        Tag    @relation(fields: [fk_tag_id], references: [id], onDelete: Cascade)

  @@index([fk_user_id], map: "user_tags_fk_user_id")
  @@index([fk_tag_id], map: "user_tags_fk_tag_id")
  @@map("user_tags")
}

model UserNotification {
  id                 String       @id @default(cuid())
  readAt             DateTime?
  fk_user_id         String
  fk_notification_id String
  User               User         @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)
  Notification       Notification @relation(fields: [fk_notification_id], references: [id], onDelete: Cascade)

  @@index([fk_user_id], map: "user_notifications_fk_user_id")
  @@index([fk_notification_id], map: "user_notifications_fk_notification_id")
  @@map("user_notifications")
}

model Post {
  id          String        @id @default(cuid())
  urlSlug     String
  title       String
  subTitle    String?
  content     String
  meta        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  fk_user_id  String
  User        User          @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)
  PostConfig  PostConfig?
  PostSeo     PostSeo?
  PostRead    PostRead[]
  PostTags    PostTags[]
  PostStats   PostStats?
  PostHistory PostHistory[]

  @@index([urlSlug], map: "posts_urlSlug")
  @@map("posts")
}

model PostSeo {
  id          String  @id @default(cuid())
  title       String?
  description String?
  image       String?
  fk_post_id  String  @unique
  Post        Post    @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)

  @@map("post_seos")
}

model PostRead {
  id         String  @id @default(cuid())
  ipHash     String?
  fk_post_id String
  Post       Post    @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)
  fk_user_id String
  User       User    @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@index([fk_post_id], map: "post_reads_fk_post_id")
  @@index([ipHash, fk_post_id], map: "post_reads_ipHash_fk_post_id")
  @@map("post_reads")
}

model PostConfig {
  id                 String    @id @default(cuid())
  disabledComment    Boolean?
  hiddenArticle      Boolean?
  hasTableOfContents Boolean?
  isDraft            Boolean?
  isMarkdown         Boolean?
  publishedAt        DateTime?
  fk_post_id         String    @unique
  Post               Post      @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)

  @@map("post_configs")
}

model PostTags {
  id         String @id @default(cuid())
  fk_post_id String
  fk_tag_id  String
  Post       Post   @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)
  Tag        Tag    @relation(fields: [fk_tag_id], references: [id], onDelete: Cascade)

  @@index([fk_post_id], map: "post_tags_fk_post_id")
  @@index([fk_tag_id], map: "post_tags_fk_tag_id")
  @@map("post_tags")
}

model PostStats {
  id         String   @id @default(cuid())
  likes      Int      @default(0)
  clicks     Int      @default(0)
  comments   Int      @default(0)
  score      Float    @default(0)
  updatedAt  DateTime @default(now()) @updatedAt
  fk_post_id String   @unique
  Post       Post     @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)

  @@index([score(sort: Desc), fk_post_id(sort: Desc)])
  @@index([likes(sort: Desc), fk_post_id(sort: Desc)])
  @@index([comments(sort: Desc), fk_post_id(sort: Desc)])
  @@map("post_stats")
}

model PostHistory {
  id         String   @id @default(cuid())
  title      String
  content    String
  meta       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fk_post_id String
  Post       Post     @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)

  @@map("post_histories")
}

model File {
  id         String   @id @default(cuid())
  cfId       String
  publicUrl  String
  filename   String
  mimeType   String
  uploadType String // IMAGE | POST_THUMBNAIL | SEO
  mediaType  String //  IMAGE | VIDEO | AUDIO
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fk_user_id String
  User       User     @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@index([uploadType, mediaType], map: "files_uploadType_mediaType")
  @@map("files")
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  UserTags    UserTags[]
  PostTags    PostTags[]

  @@index([name], map: "tags_name")
  @@map("tags")
}

model Notification {
  id        String             @id @default(cuid())
  type      String // LIKE | COMMENT | ARTICLE | WELCOME
  title     String
  body      String
  image     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  Users     UserNotification[]

  @@index([type], map: "notifications_type")
  @@map("notifications")
}
