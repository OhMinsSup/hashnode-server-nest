// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                  @id @default(autoincrement())
  email           String               @unique // 이메일 max 255
  username        String               @unique // 유저명 max 255
  passwordHash    String // 비밀번호
  createdAt       DateTime             @default(now()) // 생성일
  updatedAt       DateTime             @updatedAt // 업데이트일
  deletedAt       DateTime? // 삭제일 
  profile         UserProfile? // 프로필
  authentications UserAuthentication[] // 인증정보
  posts           Post[] // 포스트 정보
  tagFollowing    TagFollowing[] // 태그 팔로잉
}

model UserProfile {
  id                  Int                   @id @default(autoincrement())
  userId              Int                   @unique
  name                String // max 255
  bio                 String?
  avatarUrl           String?
  availableText       String? // max 140
  location            String?
  website             String? // string object array
  createdAt           DateTime              @default(now()) // 생성일
  updatedAt           DateTime              @updatedAt // 업데이트일
  deletedAt           DateTime? // 삭제일 
  user                User                  @relation(fields: [userId], references: [id])
  profileOnTechStacks ProfileOnTechStacks[]
}

model UserAuthentication {
  id              Int       @id @default(autoincrement())
  lastValidatedAt DateTime // 마지막으로 검증된 날짜
  expiresAt       DateTime // 만료시간
  createdAt       DateTime  @default(now()) // 생성일
  updatedAt       DateTime  @updatedAt // 업데이트일
  deletedAt       DateTime? // 삭제일
  user            User      @relation(fields: [userId], references: [id])
  userId          Int
}

model ProfileOnTechStacks {
  id          Int         @id @default(autoincrement())
  profile     UserProfile @relation(fields: [profileId], references: [id]) // 스토리
  techStack   TechStack   @relation(fields: [techStackId], references: [id]) // 태그
  profileId   Int // 프로필 아이디
  techStackId Int // 기술 스택 아이디
}

model TechStack {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique // 기술스택 이름
  createdAt           DateTime              @default(now()) // 생성일
  updatedAt           DateTime              @updatedAt // 업데이트일
  deletedAt           DateTime? // 삭제일 
  profileOnTechStacks ProfileOnTechStacks[]
}

model Post {
  id              Int       @id @default(autoincrement())
  title           String // max 255
  subTitle        String? // max 255
  content         String // max 255
  description     String // min 10 max 255
  thumbnail       String?
  disabledComment Boolean?  @default(false) // 댓글 비활성화
  isPublic        Boolean?  @default(false) // 공개 여부
  isDeleted       Boolean?  @default(false) // 삭제 여부
  publishingDate  DateTime? // 발행일
  createdAt       DateTime  @default(now()) // 생성일
  updatedAt       DateTime  @updatedAt // 업데이트일
  deletedAt       DateTime? // 삭제일 

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  postsTags PostsTags[]
  postLike  PostLike[]
  postStats PostStats?

  @@index([createdAt(sort: Desc)])
}

model PostStats {
  id            Int      @id @default(autoincrement())
  postId        Int      @unique
  likes         Int      @default(0)
  clicks        Int      @default(0)
  score         Float    @default(0)
  commentsCount Int      @default(0)
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  updatedAt     DateTime @default(now()) @updatedAt

  @@index([score(sort: Desc), postId(sort: Desc)])
  @@index([likes(sort: Desc), postId(sort: Desc)])
}

model PostDraft {
  id Int @id @default(autoincrement())

  title           String // max 255
  subTitle        String? // max 255
  content         String? // max 255 - json stringfiy array
  description     String? // min 10 max 255
  thumbnail       String?
  disabledComment Boolean?
  isPublic        Boolean?
  publishingDate  DateTime? // 발행일
  tags            String? // 태그 - json stringfiy array
  isSubmitted     Boolean?  @default(false) // 제출 여부
  draftUserId     Int // 초안 작성자 아이디
  createdAt       DateTime  @default(now()) // 생성일
  updatedAt       DateTime  @updatedAt // 업데이트일
  deletedAt       DateTime? // 삭제일
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime  @default(now()) // 생성일
  updatedAt DateTime  @updatedAt // 업데이트일
  deletedAt DateTime? // 삭제일 

  postsTags PostsTags[]
  following TagFollowing[]
  tagStats  TagStats?
}

model PostsTags {
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([postId, tagId])
  @@index(tagId)
  @@index(postId)
}

model PostLike {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index(postId)
}

model File {
  id         Int       @id @default(autoincrement())
  name       String // 파일명
  url        String // url
  uploadType String // PROFILE | IMAGE | POST_THUMBNAIL
  mediaType  String //  IMAGE
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  deletedAt  DateTime? // 삭제일 
}

model TagStats {
  id         Int      @id @default(autoincrement())
  tagId      Int      @unique
  followings Int      @default(0)
  clicks     Int      @default(0)
  score      Float    @default(0)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([score(sort: Desc), tagId(sort: Desc)])
  @@index([followings(sort: Desc), tagId(sort: Desc)])
}

model TagFollowing {
  id        Int      @id @default(autoincrement())
  tagId     Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tagId, userId])
  @@index(tagId)
}
