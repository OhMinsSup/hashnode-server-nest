// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique @db.VarChar(255)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @updatedAt @db.Timestamptz(6)
  deletedAt          DateTime?            @db.Timestamptz(6)
  lastActiveAt       DateTime?            @db.Timestamptz(6)
  lastActiveIpHash   String?              @db.VarChar(255)
  lastSignInAt       DateTime?            @db.Timestamptz(6)
  lastSignInIpHash   String?              @db.VarChar(255)
  UserProfile        UserProfile?
  UserSocial         UserSocial?
  UserPassword       UserPassword?
  UserEmail          UserEmail?
  UserAuthentication UserAuthentication[]
  UserNotifications  UserNotification[]
  UserTags           UserTags[]
  File               File[]
  PostRead           PostRead[]
  Post               Post[]
  PostCoAuthor       PostCoAuthor[]
  PostLike           PostLike[]

  @@map("users")
}

model UserProfile {
  id            String  @id @default(cuid())
  username      String  @unique @db.VarChar(50)
  image         String? @db.VarChar(255)
  nickname      String? @db.VarChar(50)
  tagline       String? @db.VarChar(255)
  location      String? @db.VarChar(255)
  bio           String? @db.VarChar(255)
  availableText String? @db.VarChar(140)
  fk_user_id    String  @unique
  User          User    @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserSocial {
  id            String  @id @default(cuid())
  github        String  @default("") @db.VarChar(255)
  twitter       String  @default("") @db.VarChar(255)
  facebook      String  @default("") @db.VarChar(255)
  instagram     String  @default("") @db.VarChar(255)
  website       String  @default("") @db.VarChar(255)
  stackoverflow String  @default("") @db.VarChar(255)
  youtube       String  @default("") @db.VarChar(255)
  linkedin      String  @default("") @db.VarChar(255)
  fk_user_id    String? @unique
  User          User?   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@map("user_socials")
}

model UserEmail {
  id                    String  @id @default(cuid())
  hashnodeWeekly        Boolean @default(false)
  activityNotifications Boolean @default(false)
  generalAnnouncements  Boolean @default(false)
  monthlyBlogStats      Boolean @default(false)
  referralNotifications Boolean @default(false)
  newFollowersWeekly    Boolean @default(false)
  fk_user_id            String? @unique
  User                  User?   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@map("user_emails")
}

model UserPassword {
  id         String @id @default(cuid())
  hash       String @db.VarChar(255)
  salt       String @db.VarChar(255)
  fk_user_id String @unique
  User       User   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([fk_user_id], map: "user_passwords_fk_user_id")
  @@map("user_passwords")
}

model UserAuthentication {
  id              String   @id @default(cuid())
  lastValidatedAt DateTime @db.Timestamptz(6)
  expiresAt       DateTime @db.Timestamptz(6)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)
  fk_user_id      String?
  User            User?    @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@map("user_authentications")
}

model UserTags {
  id         String @id @default(cuid())
  fk_user_id String
  fk_tag_id  String
  User       User   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)
  Tag        Tag    @relation(fields: [fk_tag_id], references: [id], onDelete: Cascade)

  @@index([fk_user_id], map: "user_tags_fk_user_id")
  @@index([fk_tag_id], map: "user_tags_fk_tag_id")
  @@map("user_tags")
}

model UserNotification {
  id                 String       @id @default(cuid())
  readAt             DateTime?    @db.Timestamptz(6)
  isRead             Boolean      @default(false)
  fk_user_id         String
  fk_notification_id String
  User               User         @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)
  Notification       Notification @relation(fields: [fk_notification_id], references: [id], onDelete: Cascade)

  @@index([fk_user_id], map: "user_notifications_fk_user_id")
  @@index([fk_notification_id], map: "user_notifications_fk_notification_id")
  @@map("user_notifications")
}

model Post {
  id           String         @id @default(cuid())
  urlSlug      String         @db.VarChar(255)
  title        String         @db.VarChar(200)
  subTitle     String?        @db.VarChar(120)
  content      String
  meta         Json           @default("{}")
  image        String?        @db.VarChar(255)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt @db.Timestamptz(6)
  deletedAt    DateTime?      @db.Timestamptz(6)
  fk_user_id   String
  User         User           @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)
  PostConfig   PostConfig?
  PostSeo      PostSeo?
  PostRead     PostRead[]
  PostTags     PostTags[]
  PostStats    PostStats?
  PostHistory  PostHistory[]
  PostCoAuthor PostCoAuthor[]
  PostLike     PostLike[]

  @@index([urlSlug], map: "posts_urlSlug")
  @@map("posts")
}

model PostSeo {
  id          String  @id @default(cuid())
  title       String? @db.VarChar(70)
  description String? @db.VarChar(156)
  image       String? @db.VarChar(255)
  fk_post_id  String  @unique
  Post        Post    @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)

  @@map("post_seos")
}

model PostRead {
  id         String  @id @default(cuid())
  ipHash     String? @db.VarChar(255)
  fk_post_id String
  fk_user_id String
  Post       Post    @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)
  User       User    @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@index([fk_post_id], map: "post_reads_fk_post_id")
  @@index([ipHash, fk_post_id], map: "post_reads_ipHash_fk_post_id")
  @@map("post_reads")
}

model PostConfig {
  id                 String    @id @default(cuid())
  disabledComment    Boolean   @default(false)
  hiddenArticle      Boolean   @default(false)
  hasTableOfContents Boolean   @default(false)
  isDraft            Boolean   @default(true)
  isMarkdown         Boolean   @default(false)
  publishedAt        DateTime? @db.Timestamptz(6)
  fk_post_id         String    @unique
  Post               Post      @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)

  @@map("post_configs")
}

model PostTags {
  id         String @id @default(cuid())
  fk_post_id String
  fk_tag_id  String
  Post       Post   @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)
  Tag        Tag    @relation(fields: [fk_tag_id], references: [id], onDelete: Cascade)

  @@index([fk_post_id], map: "post_tags_fk_post_id")
  @@index([fk_tag_id], map: "post_tags_fk_tag_id")
  @@map("post_tags")
}

model PostStats {
  id         String   @id @default(cuid())
  likes      Int      @default(0)
  clicks     Int      @default(0)
  comments   Int      @default(0)
  score      Float    @default(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  fk_post_id String   @unique
  Post       Post     @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)

  @@index([score(sort: Desc), fk_post_id(sort: Desc)])
  @@index([likes(sort: Desc), fk_post_id(sort: Desc)])
  @@index([comments(sort: Desc), fk_post_id(sort: Desc)])
  @@map("post_stats")
}

model PostHistory {
  id         String   @id @default(cuid())
  title      String   @db.VarChar(200)
  content    String
  meta       Json?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
  fk_post_id String
  Post       Post     @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)

  @@map("post_histories")
}

model PostCoAuthor {
  id         String @id @default(cuid())
  fk_post_id String
  fk_user_id String
  Post       Post   @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)
  User       User   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@index([fk_post_id], map: "post_co_authors_fk_post_id")
  @@index([fk_user_id], map: "post_co_authors_fk_user_id")
  @@map("post_co_authors")
}

model PostLike {
  id         String @id @default(cuid())
  fk_post_id String
  fk_user_id String
  Post       Post   @relation(fields: [fk_post_id], references: [id], onDelete: Cascade)
  User       User   @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@index([fk_post_id], map: "post_likes_fk_post_id")
  @@index([fk_user_id], map: "post_likes_fk_user_id")
  @@map("post_likes")
}

model File {
  id         String     @id @default(cuid())
  cfId       String     @db.VarChar(50)
  publicUrl  String     @db.VarChar(255)
  filename   String     @db.VarChar(255)
  mimeType   String     @db.VarChar(50)
  uploadType UploadType @default(IMAGE)
  mediaType  MediaType  @default(IMAGE)
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt @db.Timestamptz(6)
  fk_user_id String
  User       User       @relation(fields: [fk_user_id], references: [id], onDelete: Cascade)

  @@index([uploadType, mediaType], map: "files_uploadType_mediaType")
  @@map("files")
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique @db.VarChar(255)
  description String?    @db.VarChar(255)
  image       String?    @db.VarChar(255)
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt @db.Timestamptz(6)
  UserTags    UserTags[]
  PostTags    PostTags[]
  TagStats    TagStats?

  @@index([name], map: "tags_name")
  @@map("tags")
}

model TagStats {
  id        String   @id @default(cuid())
  follow    Int      @default(0)
  inUse     Int      @default(0)
  score     Float    @default(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  fk_tag_id String   @unique
  Tag       Tag      @relation(fields: [fk_tag_id], references: [id], onDelete: Cascade)

  @@index([score(sort: Desc), fk_tag_id(sort: Desc)])
  @@index([follow(sort: Desc), fk_tag_id(sort: Desc)])
  @@index([inUse(sort: Desc), fk_tag_id(sort: Desc)])
  @@map("tag_stats")
}

model Notification {
  id        String             @id @default(cuid())
  type      NotificationType
  title     String             @db.VarChar(255)
  body      String             @db.VarChar(255)
  meta      Json               @default("{}")
  image     String?            @db.VarChar(255)
  createdAt DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt DateTime           @updatedAt @db.Timestamptz(6)
  Users     UserNotification[]

  @@index([type], map: "notifications_type")
  @@map("notifications")
}

enum NotificationType {
  LIKE
  COMMENT
  ARTICLE
  WELCOME
}

enum UploadType {
  IMAGE
  POST_THUMBNAIL
  SEO
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

// model Blog {
//   id          String       @id @default(cuid())
//   title       String       @unique @db.VarChar(200)
//   about       String?      @db.VarChar(255)
//   createdAt   DateTime     @default(now()) @db.Timestamptz(6)
//   updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
//   BlogSetting BlogSetting?

//   @@map("blogs")
// }

// model BlogSetting {
//   id         String  @id @default(cuid())
//   github     String? @db.VarChar(255)
//   twitter    String? @db.VarChar(255)
//   instagram  String? @db.VarChar(255)
//   mastodon   String? @db.VarChar(255)
//   website    String? @db.VarChar(255)
//   youtube    String? @db.VarChar(255)
//   linkedin   String? @db.VarChar(255)
//   dailydev   String? @db.VarChar(255)
//   fk_blog_id String  @unique
//   Blog       Blog    @relation(fields: [fk_blog_id], references: [id], onDelete: Cascade)

//   @@map("blog_settings")
// }
